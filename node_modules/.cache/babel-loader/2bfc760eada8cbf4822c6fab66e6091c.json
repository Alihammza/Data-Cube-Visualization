{"ast":null,"code":"import _classCallCheck from \"/home/ali/Documents/thesis/3D Display of Datacube Query Results/main/my-app-ows/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ali/Documents/thesis/3D Display of Datacube Query Results/main/my-app-ows/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ali/Documents/thesis/3D Display of Datacube Query Results/main/my-app-ows/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ali/Documents/thesis/3D Display of Datacube Query Results/main/my-app-ows/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ali/Documents/thesis/3D Display of Datacube Query Results/main/my-app-ows/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ali/Documents/thesis/3D Display of Datacube Query Results/main/my-app-ows/src/components/Cube.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport convert from 'xml-js';\nimport THREE from '../three';\nimport 'three/examples/js/controls/OrbitControls';\nimport { API } from '../App';\n\nvar Cube =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Cube, _Component);\n\n  function Cube(props) {\n    var _this;\n\n    _classCallCheck(this, Cube);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cube).call(this, props));\n\n    _this.fetchInitialDimensions = function () {\n      axios.get(API + _this.props.query + '&' + _this.props.format).then(function (resp) {\n        var xmltojson = convert.xml2json(resp.data, {\n          compact: false,\n          spaces: 4\n        });\n        var json = JSON.parse(xmltojson);\n        var low = json.elements[0].elements[1].elements[0].elements[0].elements[0].elements[0].elements[0].text;\n        var high = json.elements[0].elements[1].elements[0].elements[0].elements[0].elements[1].elements[0].text;\n        var lowpoints = low.split(' ');\n        var highpoints = high.split(' ');\n\n        for (var i = 0; i < highpoints.length; i++) {\n          highpoints[i] = +highpoints[i];\n        }\n\n        for (var j = 0; j < lowpoints.length; j++) {\n          lowpoints[j] = +lowpoints[j];\n        }\n\n        _this.setState({\n          low: lowpoints,\n          high: highpoints\n        }, function () {\n          _this.cubeRedimension();\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.cubeRedimension = function () {\n      var lat = _this.state.high[0] - _this.state.low[0];\n      var long = _this.state.high[1] - _this.state.low[1];\n      var unix = _this.state.high[2] - _this.state.low[2];\n\n      _this.cube.geometry.scale(lat, long, unix);\n\n      _this.camera.position.z = long;\n    };\n\n    _this.drawInitialCube = function () {\n      var width = _this.mount.clientWidth;\n      var height = _this.mount.clientHeight;\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      var renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      var controls = new THREE.OrbitControls(camera, renderer.domElement);\n      var textureLoader = new THREE.TextureLoader(); // You can modify this loading.png image which is a placeholder to show when there are no ranges yet.\n\n      var texture = textureLoader.load('./images/loading.png');\n      var material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      var cubegeometry = new THREE.BoxGeometry(0, 0, 0);\n      var cube = new THREE.Mesh(cubegeometry, material);\n      camera.position.z = 4;\n      controls.update();\n      scene.add(cube);\n      renderer.setClearColor('#000000');\n      renderer.setSize(width, height);\n      _this.scene = scene;\n      _this.camera = camera;\n      _this.renderer = renderer;\n      _this.cube = cube;\n      _this.controls = controls;\n      window.addEventListener('resize', _this.handleResize);\n\n      _this.mount.appendChild(_this.renderer.domElement);\n\n      _this.start();\n    };\n\n    _this.loadImages = function () {\n      var _this$props = _this.props,\n          ranges = _this$props.ranges,\n          keyForSet = _this$props.keyForSet,\n          query = _this$props.query;\n      var textureLoader = new THREE.TextureLoader();\n      var imageFormat = '&FORMAT=image/png';\n      textureLoader.crossOrigin = \"Anonymous\"; // We construct url's by reusing the passed (query, keyForSet) from the form and the ranges from slider component.\n\n      var unixStartImage = API + query + '&' + keyForSet + '=' + 'unix(\"' + ranges.unix.start + '\")' + imageFormat;\n      var unixEndImage = API + query + '&' + keyForSet + '=' + 'unix(\"' + ranges.unix.end + '\")' + imageFormat;\n      var longStart = API + query + '&' + keyForSet + '=' + 'Long(' + ranges.longitude.start + ')' + imageFormat;\n      var longEnd = API + query + '&' + keyForSet + '=' + 'Long(' + ranges.longitude.end + ')' + imageFormat;\n      var latStart = API + query + '&' + keyForSet + '=' + 'Lat(' + ranges.latitude.start + ')' + imageFormat;\n      var latEnd = API + query + '&' + keyForSet + '=' + 'Lat(' + ranges.latitude.end + ')' + imageFormat;\n      var texture0 = textureLoader.load(longStart);\n      var texture1 = textureLoader.load(longEnd);\n      var texture2 = textureLoader.load(latStart);\n      var texture3 = textureLoader.load(latEnd);\n      var texture4 = textureLoader.load(unixStartImage);\n      var texture5 = textureLoader.load(unixEndImage);\n      var material = [new THREE.MeshBasicMaterial({\n        map: texture0\n      }), new THREE.MeshBasicMaterial({\n        map: texture1\n      }), new THREE.MeshBasicMaterial({\n        map: texture2\n      }), new THREE.MeshBasicMaterial({\n        map: texture3\n      }), new THREE.MeshBasicMaterial({\n        map: texture4\n      }), new THREE.MeshBasicMaterial({\n        map: texture5\n      })];\n      _this.cube.material = material;\n    };\n\n    _this.handleResize = function () {\n      var width = _this.mount.clientWidth;\n      var height = _this.mount.clientHeight;\n\n      _this.renderer.setSize(width, height);\n\n      _this.camera.aspect = width / height;\n\n      _this.camera.updateProjectionMatrix();\n    };\n\n    _this.start = function () {\n      if (!_this.frameId) {\n        _this.frameId = requestAnimationFrame(_this.animate);\n      }\n    };\n\n    _this.stop = function () {\n      cancelAnimationFrame(_this.frameId);\n    };\n\n    _this.animate = function () {\n      _this.controls.update();\n\n      _this.renderScene();\n\n      _this.frameId = window.requestAnimationFrame(_this.animate);\n    };\n\n    _this.renderScene = function () {\n      _this.renderer.render(_this.scene, _this.camera);\n    };\n\n    _this.state = {\n      low: [],\n      high: []\n    };\n    return _this;\n  }\n  /*  - Initial rendering of cube and loading message.\n      - Triggers fetching of initial low/high values to try to redimension the cube.\n  */\n\n\n  _createClass(Cube, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawInitialCube();\n      this.fetchInitialDimensions();\n    } // Every time we are provided with new ranges Prop triggers textures/images reloading.\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.ranges !== this.props.ranges) {\n        this.loadImages();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"vis\",\n        ref: function ref(mount) {\n          _this2.mount = mount;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Cube;\n}(Component);\n\nexport default Cube;","map":{"version":3,"sources":["/home/ali/Documents/thesis/3D Display of Datacube Query Results/main/my-app-ows/src/components/Cube.js"],"names":["React","Component","axios","convert","THREE","API","Cube","props","fetchInitialDimensions","get","query","format","then","resp","xmltojson","xml2json","data","compact","spaces","json","JSON","parse","low","elements","text","high","lowpoints","split","highpoints","i","length","j","setState","cubeRedimension","catch","err","console","log","lat","state","long","unix","cube","geometry","scale","camera","position","z","drawInitialCube","width","mount","clientWidth","height","clientHeight","scene","Scene","PerspectiveCamera","renderer","WebGLRenderer","antialias","controls","OrbitControls","domElement","textureLoader","TextureLoader","texture","load","material","MeshBasicMaterial","map","cubegeometry","BoxGeometry","Mesh","update","add","setClearColor","setSize","window","addEventListener","handleResize","appendChild","start","loadImages","ranges","keyForSet","imageFormat","crossOrigin","unixStartImage","unixEndImage","end","longStart","longitude","longEnd","latStart","latitude","latEnd","texture0","texture1","texture2","texture3","texture4","texture5","aspect","updateProjectionMatrix","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","renderScene","render","prevProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,QAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,0CAAP;AACA,SAAQC,GAAR,QAAkB,QAAlB;;IAEMC,I;;;;;AACF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;;AADe,UAuBnBC,sBAvBmB,GAuBM,YAAM;AAC3BN,MAAAA,KAAK,CAACO,GAAN,CAAUJ,GAAG,GAAG,MAAKE,KAAL,CAAWG,KAAjB,GAAyB,GAAzB,GAA+B,MAAKH,KAAL,CAAWI,MAApD,EAA4DC,IAA5D,CAAiE,UAAAC,IAAI,EAAI;AACrE,YAAMC,SAAS,GAAGX,OAAO,CAACY,QAAR,CAAiBF,IAAI,CAACG,IAAtB,EAA4B;AAC1CC,UAAAA,OAAO,EAAE,KADiC;AAE1CC,UAAAA,MAAM,EAAE;AAFkC,SAA5B,CAAlB;AAIA,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWP,SAAX,CAAb;AACA,YAAMQ,GAAG,GAAGH,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiBA,QAAjB,CAA0B,CAA1B,EAA6BA,QAA7B,CAAsC,CAAtC,EAAyCA,QAAzC,CAAkD,CAAlD,EAAqDA,QAArD,CAA8D,CAA9D,EAAiEA,QAAjE,CAA0E,CAA1E,EAA6EA,QAA7E,CAAsF,CAAtF,EAAyFC,IAArG;AACA,YAAMC,IAAI,GAAGN,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiBA,QAAjB,CAA0B,CAA1B,EAA6BA,QAA7B,CAAsC,CAAtC,EAAyCA,QAAzC,CAAkD,CAAlD,EAAqDA,QAArD,CAA8D,CAA9D,EAAiEA,QAAjE,CAA0E,CAA1E,EAA6EA,QAA7E,CAAsF,CAAtF,EAAyFC,IAAtG;AACA,YAAME,SAAS,GAAGJ,GAAG,CAACK,KAAJ,CAAU,GAAV,CAAlB;AACA,YAAMC,UAAU,GAAGH,IAAI,CAACE,KAAL,CAAW,GAAX,CAAnB;;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCD,UAAAA,UAAU,CAACC,CAAD,CAAV,GAAgB,CAAED,UAAU,CAACC,CAAD,CAA5B;AACH;;AACD,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACI,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACvCL,UAAAA,SAAS,CAACK,CAAD,CAAT,GAAe,CAAEL,SAAS,CAACK,CAAD,CAA1B;AACH;;AACD,cAAKC,QAAL,CAAc;AACVV,UAAAA,GAAG,EAAEI,SADK;AAEVD,UAAAA,IAAI,EAAEG;AAFI,SAAd,EAGG,YAAM;AACL,gBAAKK,eAAL;AACH,SALD;AAMH,OAtBD,EAsBGC,KAtBH,CAsBS,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OAtBZ;AAuBH,KA/CkB;;AAAA,UAiDnBF,eAjDmB,GAiDD,YAAM;AACpB,UAAMK,GAAG,GAAG,MAAKC,KAAL,CAAWd,IAAX,CAAgB,CAAhB,IAAqB,MAAKc,KAAL,CAAWjB,GAAX,CAAe,CAAf,CAAjC;AACA,UAAMkB,IAAI,GAAG,MAAKD,KAAL,CAAWd,IAAX,CAAgB,CAAhB,IAAqB,MAAKc,KAAL,CAAWjB,GAAX,CAAe,CAAf,CAAlC;AACA,UAAMmB,IAAI,GAAG,MAAKF,KAAL,CAAWd,IAAX,CAAgB,CAAhB,IAAqB,MAAKc,KAAL,CAAWjB,GAAX,CAAe,CAAf,CAAlC;;AACA,YAAKoB,IAAL,CAAUC,QAAV,CAAmBC,KAAnB,CAAyBN,GAAzB,EAA8BE,IAA9B,EAAoCC,IAApC;;AACA,YAAKI,MAAL,CAAYC,QAAZ,CAAqBC,CAArB,GAAyBP,IAAzB;AACH,KAvDkB;;AAAA,UAyDnBQ,eAzDmB,GAyDD,YAAM;AACpB,UAAMC,KAAK,GAAG,MAAKC,KAAL,CAAWC,WAAzB;AACA,UAAMC,MAAM,GAAG,MAAKF,KAAL,CAAWG,YAA1B;AACA,UAAMC,KAAK,GAAG,IAAIlD,KAAK,CAACmD,KAAV,EAAd;AACA,UAAMV,MAAM,GAAG,IAAIzC,KAAK,CAACoD,iBAAV,CAA4B,EAA5B,EAAgCP,KAAK,GAAGG,MAAxC,EAAgD,GAAhD,EAAqD,IAArD,CAAf;AACA,UAAMK,QAAQ,GAAG,IAAIrD,KAAK,CAACsD,aAAV,CAAwB;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAxB,CAAjB;AACA,UAAMC,QAAQ,GAAG,IAAIxD,KAAK,CAACyD,aAAV,CAAwBhB,MAAxB,EAAgCY,QAAQ,CAACK,UAAzC,CAAjB;AACA,UAAMC,aAAa,GAAG,IAAI3D,KAAK,CAAC4D,aAAV,EAAtB,CAPoB,CASpB;;AACA,UAAMC,OAAO,GAAGF,aAAa,CAACG,IAAd,CAAmB,sBAAnB,CAAhB;AACA,UAAMC,QAAQ,GAAG,IAAI/D,KAAK,CAACgE,iBAAV,CAA4B;AAACC,QAAAA,GAAG,EAAEJ;AAAN,OAA5B,CAAjB;AACA,UAAIK,YAAY,GAAG,IAAIlE,KAAK,CAACmE,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAnB;AACA,UAAI7B,IAAI,GAAG,IAAItC,KAAK,CAACoE,IAAV,CAAeF,YAAf,EAA6BH,QAA7B,CAAX;AAEAtB,MAAAA,MAAM,CAACC,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACAa,MAAAA,QAAQ,CAACa,MAAT;AAEAnB,MAAAA,KAAK,CAACoB,GAAN,CAAUhC,IAAV;AACAe,MAAAA,QAAQ,CAACkB,aAAT,CAAuB,SAAvB;AACAlB,MAAAA,QAAQ,CAACmB,OAAT,CAAiB3B,KAAjB,EAAwBG,MAAxB;AAEA,YAAKE,KAAL,GAAaA,KAAb;AACA,YAAKT,MAAL,GAAcA,MAAd;AACA,YAAKY,QAAL,GAAgBA,QAAhB;AACA,YAAKf,IAAL,GAAYA,IAAZ;AACA,YAAKkB,QAAL,GAAgBA,QAAhB;AAEAiB,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,MAAKC,YAAvC;;AAEA,YAAK7B,KAAL,CAAW8B,WAAX,CAAuB,MAAKvB,QAAL,CAAcK,UAArC;;AACA,YAAKmB,KAAL;AACH,KAzFkB;;AAAA,UA2FnBC,UA3FmB,GA2FN,YAAM;AAAA,wBACoB,MAAK3E,KADzB;AAAA,UACR4E,MADQ,eACRA,MADQ;AAAA,UACAC,SADA,eACAA,SADA;AAAA,UACW1E,KADX,eACWA,KADX;AAEf,UAAMqD,aAAa,GAAG,IAAI3D,KAAK,CAAC4D,aAAV,EAAtB;AACA,UAAMqB,WAAW,GAAG,mBAApB;AACAtB,MAAAA,aAAa,CAACuB,WAAd,GAA4B,WAA5B,CAJe,CAMf;;AACA,UAAMC,cAAc,GAAGlF,GAAG,GAAGK,KAAN,GAAc,GAAd,GAAoB0E,SAApB,GAAgC,GAAhC,GAAsC,QAAtC,GAAiDD,MAAM,CAAC1C,IAAP,CAAYwC,KAA7D,GAAqE,IAArE,GAA4EI,WAAnG;AACA,UAAMG,YAAY,GAAGnF,GAAG,GAAGK,KAAN,GAAc,GAAd,GAAoB0E,SAApB,GAAgC,GAAhC,GAAsC,QAAtC,GAAiDD,MAAM,CAAC1C,IAAP,CAAYgD,GAA7D,GAAmE,IAAnE,GAA0EJ,WAA/F;AACA,UAAMK,SAAS,GAAGrF,GAAG,GAAGK,KAAN,GAAc,GAAd,GAAoB0E,SAApB,GAAgC,GAAhC,GAAsC,OAAtC,GAAgDD,MAAM,CAACQ,SAAP,CAAiBV,KAAjE,GAAyE,GAAzE,GAA+EI,WAAjG;AACA,UAAMO,OAAO,GAAGvF,GAAG,GAAGK,KAAN,GAAc,GAAd,GAAoB0E,SAApB,GAAgC,GAAhC,GAAsC,OAAtC,GAAgDD,MAAM,CAACQ,SAAP,CAAiBF,GAAjE,GAAuE,GAAvE,GAA6EJ,WAA7F;AACA,UAAMQ,QAAQ,GAAGxF,GAAG,GAAGK,KAAN,GAAc,GAAd,GAAoB0E,SAApB,GAAgC,GAAhC,GAAsC,MAAtC,GAA+CD,MAAM,CAACW,QAAP,CAAgBb,KAA/D,GAAuE,GAAvE,GAA6EI,WAA9F;AACA,UAAMU,MAAM,GAAG1F,GAAG,GAAGK,KAAN,GAAc,GAAd,GAAoB0E,SAApB,GAAgC,GAAhC,GAAsC,MAAtC,GAA+CD,MAAM,CAACW,QAAP,CAAgBL,GAA/D,GAAqE,GAArE,GAA2EJ,WAA1F;AAEA,UAAMW,QAAQ,GAAGjC,aAAa,CAACG,IAAd,CAAmBwB,SAAnB,CAAjB;AACA,UAAMO,QAAQ,GAAGlC,aAAa,CAACG,IAAd,CAAmB0B,OAAnB,CAAjB;AACA,UAAMM,QAAQ,GAAGnC,aAAa,CAACG,IAAd,CAAmB2B,QAAnB,CAAjB;AACA,UAAMM,QAAQ,GAAGpC,aAAa,CAACG,IAAd,CAAmB6B,MAAnB,CAAjB;AACA,UAAMK,QAAQ,GAAGrC,aAAa,CAACG,IAAd,CAAmBqB,cAAnB,CAAjB;AACA,UAAMc,QAAQ,GAAGtC,aAAa,CAACG,IAAd,CAAmBsB,YAAnB,CAAjB;AAEA,UAAMrB,QAAQ,GAAG,CACb,IAAI/D,KAAK,CAACgE,iBAAV,CAA4B;AAACC,QAAAA,GAAG,EAAE2B;AAAN,OAA5B,CADa,EAEb,IAAI5F,KAAK,CAACgE,iBAAV,CAA4B;AAACC,QAAAA,GAAG,EAAE4B;AAAN,OAA5B,CAFa,EAGb,IAAI7F,KAAK,CAACgE,iBAAV,CAA4B;AAACC,QAAAA,GAAG,EAAE6B;AAAN,OAA5B,CAHa,EAIb,IAAI9F,KAAK,CAACgE,iBAAV,CAA4B;AAACC,QAAAA,GAAG,EAAE8B;AAAN,OAA5B,CAJa,EAKb,IAAI/F,KAAK,CAACgE,iBAAV,CAA4B;AAACC,QAAAA,GAAG,EAAE+B;AAAN,OAA5B,CALa,EAMb,IAAIhG,KAAK,CAACgE,iBAAV,CAA4B;AAACC,QAAAA,GAAG,EAAEgC;AAAN,OAA5B,CANa,CAAjB;AASA,YAAK3D,IAAL,CAAUyB,QAAV,GAAqBA,QAArB;AACH,KA1HkB;;AAAA,UA4HnBY,YA5HmB,GA4HJ,YAAM;AACjB,UAAM9B,KAAK,GAAG,MAAKC,KAAL,CAAWC,WAAzB;AACA,UAAMC,MAAM,GAAG,MAAKF,KAAL,CAAWG,YAA1B;;AACA,YAAKI,QAAL,CAAcmB,OAAd,CAAsB3B,KAAtB,EAA6BG,MAA7B;;AACA,YAAKP,MAAL,CAAYyD,MAAZ,GAAqBrD,KAAK,GAAGG,MAA7B;;AACA,YAAKP,MAAL,CAAY0D,sBAAZ;AACH,KAlIkB;;AAAA,UAoInBtB,KApImB,GAoIX,YAAM;AACV,UAAI,CAAC,MAAKuB,OAAV,EAAmB;AACf,cAAKA,OAAL,GAAeC,qBAAqB,CAAC,MAAKC,OAAN,CAApC;AACH;AACJ,KAxIkB;;AAAA,UA0InBC,IA1ImB,GA0IZ,YAAM;AACTC,MAAAA,oBAAoB,CAAC,MAAKJ,OAAN,CAApB;AACH,KA5IkB;;AAAA,UA8InBE,OA9ImB,GA8IT,YAAM;AACZ,YAAK9C,QAAL,CAAca,MAAd;;AACA,YAAKoC,WAAL;;AACA,YAAKL,OAAL,GAAe3B,MAAM,CAAC4B,qBAAP,CAA6B,MAAKC,OAAlC,CAAf;AACH,KAlJkB;;AAAA,UAoJnBG,WApJmB,GAoJL,YAAM;AAChB,YAAKpD,QAAL,CAAcqD,MAAd,CAAqB,MAAKxD,KAA1B,EAAiC,MAAKT,MAAtC;AACH,KAtJkB;;AAEf,UAAKN,KAAL,GAAa;AACTjB,MAAAA,GAAG,EAAE,EADI;AAETG,MAAAA,IAAI,EAAE;AAFG,KAAb;AAFe;AAMlB;AAED;;;;;;;wCAGoB;AAChB,WAAKuB,eAAL;AACA,WAAKxC,sBAAL;AACH,K,CAED;;;;uCACmBuG,S,EAAW;AAC1B,UAAIA,SAAS,CAAC5B,MAAV,KAAqB,KAAK5E,KAAL,CAAW4E,MAApC,EAA4C;AACxC,aAAKD,UAAL;AACH;AACJ;;;6BAmIQ;AAAA;;AACL,aAAQ;AAAK,QAAA,SAAS,EAAC,KAAf;AAAqB,QAAA,GAAG,EAAG,aAAAhC,KAAK,EAAI;AAAE,UAAA,MAAI,CAACA,KAAL,GAAaA,KAAb;AAAoB,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACH;;;;EA3JcjD,S;;AA8JnB,eAAeK,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport convert from 'xml-js'\nimport THREE from '../three'\nimport 'three/examples/js/controls/OrbitControls';\nimport {API} from '../App';\n\nclass Cube extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            low: [],\n            high: []\n        }\n    }\n\n    /*  - Initial rendering of cube and loading message.\n        - Triggers fetching of initial low/high values to try to redimension the cube.\n    */\n    componentDidMount() {\n        this.drawInitialCube();\n        this.fetchInitialDimensions();\n    }\n\n    // Every time we are provided with new ranges Prop triggers textures/images reloading.\n    componentDidUpdate(prevProps) {\n        if (prevProps.ranges !== this.props.ranges) {\n            this.loadImages();\n        }\n    }\n\n    fetchInitialDimensions = () => {\n        axios.get(API + this.props.query + '&' + this.props.format).then(resp => {\n            const xmltojson = convert.xml2json(resp.data, {\n                compact: false,\n                spaces: 4\n            });\n            const json = JSON.parse(xmltojson);\n            const low = json.elements[0].elements[1].elements[0].elements[0].elements[0].elements[0].elements[0].text;\n            const high = json.elements[0].elements[1].elements[0].elements[0].elements[0].elements[1].elements[0].text;\n            const lowpoints = low.split(' ');\n            const highpoints = high.split(' ');\n            for (let i = 0; i < highpoints.length; i++) {\n                highpoints[i] = + highpoints[i];\n            }\n            for (let j = 0; j < lowpoints.length; j++) {\n                lowpoints[j] = + lowpoints[j];\n            }\n            this.setState({\n                low: lowpoints,\n                high: highpoints\n            }, () => {\n                this.cubeRedimension();\n            });\n        }).catch(err => console.log(err));\n    }\n\n    cubeRedimension = () => {\n        const lat = this.state.high[0] - this.state.low[0];\n        const long = this.state.high[1] - this.state.low[1];\n        const unix = this.state.high[2] - this.state.low[2];\n        this.cube.geometry.scale(lat, long, unix);\n        this.camera.position.z = long;\n    }\n\n    drawInitialCube = () => {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({antialias: true});\n        const controls = new THREE.OrbitControls(camera, renderer.domElement);\n        const textureLoader = new THREE.TextureLoader();\n\n        // You can modify this loading.png image which is a placeholder to show when there are no ranges yet.\n        const texture = textureLoader.load('./images/loading.png');\n        const material = new THREE.MeshBasicMaterial({map: texture});\n        var cubegeometry = new THREE.BoxGeometry(0, 0, 0);\n        let cube = new THREE.Mesh(cubegeometry, material);\n\n        camera.position.z = 4;\n        controls.update();\n\n        scene.add(cube);\n        renderer.setClearColor('#000000');\n        renderer.setSize(width, height);\n\n        this.scene = scene;\n        this.camera = camera;\n        this.renderer = renderer;\n        this.cube = cube;\n        this.controls = controls;\n\n        window.addEventListener('resize', this.handleResize);\n\n        this.mount.appendChild(this.renderer.domElement);\n        this.start();\n    }\n\n    loadImages = () => {\n        const {ranges, keyForSet, query} = this.props;\n        const textureLoader = new THREE.TextureLoader();\n        const imageFormat = '&FORMAT=image/png';\n        textureLoader.crossOrigin = \"Anonymous\";\n\n        // We construct url's by reusing the passed (query, keyForSet) from the form and the ranges from slider component.\n        const unixStartImage = API + query + '&' + keyForSet + '=' + 'unix(\"' + ranges.unix.start + '\")' + imageFormat;\n        const unixEndImage = API + query + '&' + keyForSet + '=' + 'unix(\"' + ranges.unix.end + '\")' + imageFormat;\n        const longStart = API + query + '&' + keyForSet + '=' + 'Long(' + ranges.longitude.start + ')' + imageFormat;\n        const longEnd = API + query + '&' + keyForSet + '=' + 'Long(' + ranges.longitude.end + ')' + imageFormat;\n        const latStart = API + query + '&' + keyForSet + '=' + 'Lat(' + ranges.latitude.start + ')' + imageFormat;\n        const latEnd = API + query + '&' + keyForSet + '=' + 'Lat(' + ranges.latitude.end + ')' + imageFormat;\n\n        const texture0 = textureLoader.load(longStart);\n        const texture1 = textureLoader.load(longEnd);\n        const texture2 = textureLoader.load(latStart);\n        const texture3 = textureLoader.load(latEnd);\n        const texture4 = textureLoader.load(unixStartImage);\n        const texture5 = textureLoader.load(unixEndImage);\n\n        const material = [\n            new THREE.MeshBasicMaterial({map: texture0}),\n            new THREE.MeshBasicMaterial({map: texture1}),\n            new THREE.MeshBasicMaterial({map: texture2}),\n            new THREE.MeshBasicMaterial({map: texture3}),\n            new THREE.MeshBasicMaterial({map: texture4}),\n            new THREE.MeshBasicMaterial({map: texture5}),\n        ];\n\n        this.cube.material = material;\n    }\n\n    handleResize = () => {\n        const width = this.mount.clientWidth\n        const height = this.mount.clientHeight\n        this.renderer.setSize(width, height)\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n    }\n\n    start = () => {\n        if (!this.frameId) {\n            this.frameId = requestAnimationFrame(this.animate)\n        }\n    }\n\n    stop = () => {\n        cancelAnimationFrame(this.frameId)\n    }\n\n    animate = () => {\n        this.controls.update();\n        this.renderScene()\n        this.frameId = window.requestAnimationFrame(this.animate)\n    }\n\n    renderScene = () => {\n        this.renderer.render(this.scene, this.camera)\n    }\n\n    render() {\n        return (<div className=\"vis\" ref={ mount => { this.mount = mount }}/>)\n    }\n}\n\nexport default Cube\n"]},"metadata":{},"sourceType":"module"}